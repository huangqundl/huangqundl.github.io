<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>灵魂熔炉</title><link href="http://huangqundl.github.io/blog/" rel="alternate"></link><link href="http://huangqundl.github.io/blog/feeds/tech.atom.xml" rel="self"></link><id>http://huangqundl.github.io/blog/</id><updated>2012-08-23T15:22:00+02:00</updated><entry><title>Yahoo! S4安装手记</title><link href="http://huangqundl.github.io/blog/posts/2012-Aug-s4-install" rel="alternate"></link><updated>2012-08-23T15:22:00+02:00</updated><author><name>huangqundl</name></author><id>tag:huangqundl.github.io,2012-08-23:blog/posts/2012-Aug-s4-install</id><summary type="html">&lt;p&gt;S4是Yahoo!在2010年发布的一个分布式处理框架. 不同于MapReduce的面向批处理应用，S4面向的应用主要是数据流的处理（类似于Hadoop Stream）.具体的细节可以看他们在KDCloud 2010上的&lt;a href="http://www.4lunas.org/pub/2010-s4.pdf"&gt;Paper&lt;/a&gt;，以及&lt;a href="http://incubator.apache.org/s4"&gt;官方网站&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;目前整个项目还只是Alpha版（七月底的时候刚刚进行了一次重构，上周五发布了0.5.0版本）.但对于我这样的CS初学者来说，一个还处于雏形的项目上手成本相对会低一些吧（相对于Linux Kernel或许Xen）.&lt;/p&gt;
&lt;p&gt;本文基本是把wiki上的&lt;a href="https://cwiki.apache.org/confluence/display/S4/S4+piper+walkthrough"&gt;WalkThrough&lt;/a&gt;走了一遍，以及一些自己遇到的一些问题.&lt;/p&gt;
&lt;h3&gt;平台：Ubuntu 10.04 + Sun Java 6.&lt;/h3&gt;
&lt;h2&gt;1. 下载&lt;/h2&gt;
&lt;p&gt;使用git下载代码包，进入S4根目录.
&lt;pre&gt;&lt;code&gt;git clone https://git-wip-us.apache.org/repos/asf/incubator-s4.git
cd incubator-s4/
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;当然也可以&lt;a href="http://incubator.apache.org/s4/download"&gt;官网&lt;/a&gt;直接下载.&lt;/p&gt;
&lt;h2&gt;2. 配置代理&lt;/h2&gt;
&lt;p&gt;安装时，许多包需要通过网络下载，所有工作都基于一个叫gradle的项目. lib/下就是gradle的jar包，它通过根目录下的gradlew调用。如果所在环境需要代理才能上网，则必须在gradle中添加HTTP与HTTPS代理。添加的方法有很多种，我是直接打开gradlew文件，然后在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前加上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JVM_OPTS[${#JVM_OPTS[*]}]="-Dhttp.proxyHost=proxy.cse.cuhk.edu.hk"
JVM_OPTS[${#JVM_OPTS[*]}]="-Dhttp.proxyPort=8000"
JVM_OPTS[${#JVM_OPTS[*]}]="-Dhttps.proxyHost=proxy.cse.cuhk.edu.hk"
JVM_OPTS[${#JVM_OPTS[*]}]="-Dhttps.proxyPort=8000"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的代理服务器与端口自己设置.&lt;/p&gt;
&lt;h2&gt;3. 编译与安装&lt;/h2&gt;
&lt;p&gt;期间会下载一些第三方的包，比如S4中用来容错的ZooKeeper.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew install -DskipTests
./gradlew s4-tools:installApp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;4. 新建一个应用程序&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mkdir tmp
./s4 newApp myApp -parentDir=tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在tmp下就会看到一个myApp文件夹，默认S4会创建一个HelloWorld的模板样例.这里我们就用这个样例进行演示.&lt;/p&gt;
&lt;h2&gt;5. 为新建的应用程序配置运行环境&lt;/h2&gt;
&lt;p&gt;首先，启动ZooKeeper服务器.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 zkServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，如果在终端中打开ZooKeeper，这个终端不能关闭，需要在新的终端中继续后面的配置。&lt;/p&gt;
&lt;p&gt;接着，建立一个cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 newCluster -c=cluster1 -nbTasks=2 -flp=12000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里集群的名字叫cluster1，（期望）包含两个节点，节点的端口号从12000开始顺序分配，即两个节点的端口号为12000与12001.&lt;/p&gt;
&lt;p&gt;然后，在cluster1中新建两个节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 node -c=cluster1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似ZooKeeper，新建节点后不能关闭终端，因此在另一个终端中重复执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 node -c=cluster1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6. 把样例应用部署到cluster1上&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;./s4 deploy -appName=myApp -c=cluster1 -b=tmp/myApp/build.gradle -a=hello.HelloApp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意-b参数使用的是myApp下的build.gradle文件，而不是s4根目录下的。&lt;/p&gt;
&lt;p&gt;另外，命令过程中需要用gradle下载一些第三方包，这里涉及到了另一种代理设置方法：在myApp下的gradle.properties文件（没有就新建一个）中写入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemProp.http.proxyHost=proxy.cse.cuhk.edu.hk
systemProp.http.proxyPort=8000
systemProp.https.proxyHost=proxy.cse.cuhk.edu.hk
systemProp.https.proxyPort=8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可得到样例应用信息.&lt;/p&gt;
&lt;h2&gt;7. 为样例应用装配输入流&lt;/h2&gt;
&lt;p&gt;S4中的信息是通过流（Stream）传播的. 对于应用外部的信息，需要用Adapter将它们转化成相应的流. 样例应用中的HelloInputAdapter通过监听系统中的15000端口，把发往该端口的信息转换成了样例应用的输入流。&lt;/p&gt;
&lt;p&gt;由于Adapter也是一种特殊的应用，因此也需要为HelloInputAdapter配置运行环境.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./s4 newCluster -c=cluster2 -nbTasks=1 -flp=13000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cluser2只有一个节点，端口号为13000.&lt;/p&gt;
&lt;p&gt;部署Adapter的方法有两种：&lt;/p&gt;
&lt;h3&gt;7.a. 进入myApp根目录，部署HelloInputAdapter.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd tmp/myApp
./s4 adapter -appClass=hello.HelloInputAdapter -c=cluster2 -p=s4.adapter.output.stream=names
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，这个命令是对于添加adapter型节点的一个封装，它根据已有的应用（比如myApp）自动匹配adapter，因此需要在myApp文件下执行.&lt;/p&gt;
&lt;h3&gt;7.b. 用传统的方法添加节点.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./s4 node -c=cluster2 -p=s4.adapter.output.stream=names
./s4 deploy -appName=HelloInputAdapter -c=cluster2 -b=tmp/myApp/build.gradle -a=hello.HelloInputAdapter
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;8. 执行&lt;/h2&gt;
&lt;p&gt;往15000端口发送信息，即可在cluster1的两个节点的终端中看到输出了.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "qhuang" | nc localhost 15000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;9. 在Eclipse中查看代码&lt;/h2&gt;
&lt;p&gt;Linux下只需在S4根目录下执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew eclipse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可把subprojects下的项目导入Eclipse.&lt;/p&gt;
&lt;p&gt;但在Windows下没有这个命令，导入subprojects会找不到对应的第三方jar包. 我的做法是，在Linux下执行后，把~/.gradle/caches/artifacts-13/filestore/拷贝到windows中，然后再把subprojects中的第三方jar包指向windows下filestore文件夹里对应的jar包. 如果嫌在Eclipse中一个个改麻烦的话，一种快速的修改方法是，修改每个project下的.classpath文件.&lt;/p&gt;</summary><category term="tech"></category><category term="stream"></category></entry></feed>